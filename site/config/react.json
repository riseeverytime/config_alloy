{
    "react/boolean-prop-naming": {
        "name": "react/boolean-prop-naming",
        "value": "off",
        "description": "布尔值类型的 propTypes 的 name 必须为 is 或 has 开头",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/button-has-type": {
        "name": "react/button-has-type",
        "value": "off",
        "description": "<button> 必须有 type 属性",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/default-props-match-prop-types": {
        "name": "react/default-props-match-prop-types",
        "value": "off",
        "description": "一个 defaultProps 必须有对应的 propTypes",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/destructuring-assignment": {
        "name": "react/destructuring-assignment",
        "value": "off",
        "description": "props, state, context 必须用解构赋值",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/display-name": {
        "name": "react/display-name",
        "value": "off",
        "description": "组件必须有 displayName 属性",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 displayName"
    },
    "react/forbid-component-props": {
        "name": "react/forbid-component-props",
        "value": "off",
        "description": "禁止在自定义组件中使用指定的 props",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/forbid-dom-props": {
        "name": "react/forbid-dom-props",
        "value": "off",
        "description": "禁止在 dom 组件中使用指定的 props",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/forbid-elements": {
        "name": "react/forbid-elements",
        "value": "off",
        "description": "禁止使用指定的组件",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/forbid-foreign-prop-types": {
        "name": "react/forbid-foreign-prop-types",
        "value": "off",
        "description": "禁止使用另一个组件的 propTypes",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/forbid-prop-types": {
        "name": "react/forbid-prop-types",
        "value": "off",
        "description": "禁止使用 PropTypes.any PropTypes.array 和 PropTypes.object",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/jsx-boolean-value": {
        "name": "react/jsx-boolean-value",
        "value": "off",
        "description": "布尔值的属性必须显式的声明值为 true",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-curly-brace-presence": {
        "name": "react/jsx-curly-brace-presence",
        "value": ["error", "never"],
        "description": "禁止 jsx 中使用无用的引号",
        "category": "",
        "badExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><mark class=\"eslint-error\" data-tip=\"Curly braces are unnecessary here.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-curly-brace-presence)&lt;/span&gt;\"><span class=\"token punctuation\">{</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">}</span></mark></span><span class=\"token punctuation\">></span></span><mark class=\"eslint-error\" data-tip=\"Curly braces are unnecessary here.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-curly-brace-presence)&lt;/span&gt;\"><span class=\"token punctuation\">{</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">}</span></mark><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token attr-name\">prop</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-filename-extension": {
        "name": "react/jsx-filename-extension",
        "value": "off",
        "description": "限制文件后缀",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-fragments": {
        "name": "react/jsx-fragments",
        "value": ["error", "syntax"],
        "description": "必须使用 <></> 而不是 React.Fragment",
        "category": "",
        "badExample": "<mark class=\"eslint-error\" data-tip=\"Prefer fragment shorthand over React.Fragment&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-fragments)&lt;/span&gt;\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span></mark><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>",
        "reason": "<></> 不需要额外引入 Fragment 组件"
    },
    "react/jsx-handler-names": {
        "name": "react/jsx-handler-names",
        "value": "off",
        "description": "handler 的名称必须是 onXXX 或 handleXXX",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-key": {
        "name": "react/jsx-key",
        "value": ["error", { "checkFragmentShorthand": true }],
        "description": "数组中的 jsx 必须有 key",
        "category": "",
        "badExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <mark class=\"eslint-error\" data-tip=\"Missing &quot;key&quot; prop for element in iterator&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-key)&lt;/span&gt;\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></mark>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <mark class=\"eslint-error\" data-tip=\"Missing &quot;key&quot; prop for element in iterator. Shorthand fragment syntax does support providing keys&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-key)&lt;/span&gt;\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span></mark>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Fragment</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Fragment</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-max-depth": {
        "name": "react/jsx-max-depth",
        "value": "off",
        "description": "限制 jsx 层级",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-bind": {
        "name": "react/jsx-no-bind",
        "value": "off",
        "description": "jsx 中禁止使用 bind",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-comment-textnodes": {
        "name": "react/jsx-no-comment-textnodes",
        "value": "error",
        "description": "禁止在 jsx 中使用像注释的字符串",
        "category": "",
        "badExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><mark class=\"eslint-error\" data-tip=\"Comments inside children section of tag should be placed inside braces&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-no-comment-textnodes)&lt;/span&gt;\">// empty div</mark>&lt;/div>;\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><mark class=\"eslint-error\" data-tip=\"Comments inside children section of tag should be placed inside braces&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-no-comment-textnodes)&lt;/span&gt;\">/* empty div */</mark></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">;\n</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* empty div */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token comment\">/* empty div */</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-no-duplicate-props": {
        "name": "react/jsx-no-duplicate-props",
        "value": "error",
        "description": "禁止出现重复的 props",
        "category": "",
        "badExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <mark class=\"eslint-error\" data-tip=\"No duplicate props allowed&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-no-duplicate-props)&lt;/span&gt;\"><span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span></mark> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-no-literals": {
        "name": "react/jsx-no-literals",
        "value": "off",
        "description": "禁止在 jsx 中出现字符串",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-target-blank": {
        "name": "react/jsx-no-target-blank",
        "value": "off",
        "description": "禁止使用 target=\"_blank\"",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-no-undef": {
        "name": "react/jsx-no-undef",
        "value": "error",
        "description": "禁止使用未定义的组件",
        "category": "",
        "badExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\"><mark class=\"eslint-error\" data-tip=\"&apos;Foo&apos; is not defined.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-no-undef)&lt;/span&gt;\">Foo</mark></span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./Foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-pascal-case": {
        "name": "react/jsx-pascal-case",
        "value": "error",
        "description": "禁止使用 pascal 格式的组件",
        "category": "",
        "badExample": "<span class=\"token tag\"><mark class=\"eslint-error\" data-tip=\"Imported JSX component FOO must be in PascalCase&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-pascal-case)&lt;/span&gt;\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FOO</span></span> <span class=\"token punctuation\">/></span></mark></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><mark class=\"eslint-error\" data-tip=\"Imported JSX component FOO_BAR must be in PascalCase&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(react/jsx-pascal-case)&lt;/span&gt;\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FOO_BAR</span></span> <span class=\"token punctuation\">/></span></mark></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FooBar</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-props-no-spreading": {
        "name": "react/jsx-props-no-spreading",
        "value": "off",
        "description": "禁止使用 {...props}",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-sort-default-props": {
        "name": "react/jsx-sort-default-props",
        "value": "off",
        "description": "defaultProps 必须按字母排序",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-sort-props": {
        "name": "react/jsx-sort-props",
        "value": "off",
        "description": "props 必须按字母排序",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/jsx-uses-react": {
        "name": "react/jsx-uses-react",
        "value": "error",
        "description": "修复 React 被误报为未使用的变量的问题（仅在开启 no-unused-vars 时有效）",
        "category": "",
        "badExample": "<span class=\"token comment\">/* eslint no-unused-vars: \"error\", react/jsx-uses-react: \"off\" */</span>\n<span class=\"token keyword\">import</span> <mark class=\"eslint-error\" data-tip=\"&apos;React&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">React</mark> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token comment\">/* eslint no-unused-vars: \"error\" */</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/jsx-uses-vars": {
        "name": "react/jsx-uses-vars",
        "value": "error",
        "description": "已定义的组件必须使用",
        "category": "",
        "badExample": "<span class=\"token comment\">/* eslint no-unused-vars: \"error\" */</span>\n<span class=\"token keyword\">import</span> <mark class=\"eslint-error\" data-tip=\"&apos;Foo&apos; is defined but never used.&lt;br/&gt;&lt;span class=&apos;eslint-error-rule-id&apos;&gt;eslint(no-unused-vars)&lt;/span&gt;\">Foo</mark> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Foo'</span><span class=\"token punctuation\">;</span>",
        "goodExample": "<span class=\"token comment\">/* eslint no-unused-vars: \"error\" */</span>\n<span class=\"token keyword\">import</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./Foo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>"
    },
    "react/no-access-state-in-setstate": {
        "name": "react/no-access-state-in-setstate",
        "value": "off",
        "description": "禁止在 setState 时使用 this.state",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-array-index-key": {
        "name": "react/no-array-index-key",
        "value": "off",
        "description": "禁止使用数组的 index 作为 key",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-children-prop": {
        "name": "react/no-children-prop",
        "value": "error",
        "description": "禁止使用 children 做 props",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-danger": {
        "name": "react/no-danger",
        "value": "off",
        "description": "禁止使用 dangerouslySetInnerHTML",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-danger-with-children": {
        "name": "react/no-danger-with-children",
        "value": "error",
        "description": "禁止在使用了 dangerouslySetInnerHTML 的组件内添加 children",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-deprecated": {
        "name": "react/no-deprecated",
        "value": "error",
        "description": "禁止使用已废弃的 api",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-did-mount-set-state": {
        "name": "react/no-did-mount-set-state",
        "value": "off",
        "description": "禁止在 componentDidMount 里面使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "同构应用需要在 didMount 里写 setState"
    },
    "react/no-did-update-set-state": {
        "name": "react/no-did-update-set-state",
        "value": "error",
        "description": "禁止在 componentDidUpdate 里面使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-direct-mutation-state": {
        "name": "react/no-direct-mutation-state",
        "value": "error",
        "description": "禁止直接修改 this.state",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-find-dom-node": {
        "name": "react/no-find-dom-node",
        "value": "error",
        "description": "禁止使用 findDOMNode",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-is-mounted": {
        "name": "react/no-is-mounted",
        "value": "error",
        "description": "禁止使用 isMounted",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-multi-comp": {
        "name": "react/no-multi-comp",
        "value": "off",
        "description": "禁止在一个文件创建两个组件",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "有一个 bug：https://github.com/yannickcr/eslint-plugin-react/issues/1181"
    },
    "react/no-redundant-should-component-update": {
        "name": "react/no-redundant-should-component-update",
        "value": "error",
        "description": "禁止在 PureComponent 中使用 shouldComponentUpdate",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-render-return-value": {
        "name": "react/no-render-return-value",
        "value": "error",
        "description": "禁止使用 ReactDOM.render 的返回值",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-set-state": {
        "name": "react/no-set-state",
        "value": "off",
        "description": "禁止使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-string-refs": {
        "name": "react/no-string-refs",
        "value": "error",
        "description": "禁止使用字符串 ref",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-this-in-sfc": {
        "name": "react/no-this-in-sfc",
        "value": "error",
        "description": "禁止在函数组件中使用 this",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-typos": {
        "name": "react/no-typos",
        "value": "error",
        "description": "禁止拼写错误",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unescaped-entities": {
        "name": "react/no-unescaped-entities",
        "value": "error",
        "description": "禁止在组件的内部存在未转义的 >, \", ' 或 }",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unknown-property": {
        "name": "react/no-unknown-property",
        "value": "error",
        "description": "禁止出现 HTML 中的属性，如 class",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unsafe": {
        "name": "react/no-unsafe",
        "value": "error",
        "description": "禁止使用不安全的生命周期方法 componentWillMount, componentWillReceiveProps, componentWillUpdate",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/no-unused-prop-types": {
        "name": "react/no-unused-prop-types",
        "value": "off",
        "description": "禁止出现未使用的 propTypes",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/no-unused-state": {
        "name": "react/no-unused-state",
        "value": "off",
        "description": "已定义的 state 必须使用",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "没有官方文档，并且存在很多 bug：https://github.com/yannickcr/eslint-plugin-react/search?q=no-unused-state&type=Issues&utf8=%E2%9C%93"
    },
    "react/no-will-update-set-state": {
        "name": "react/no-will-update-set-state",
        "value": "error",
        "description": "禁止在 componentWillUpdate 中使用 setState",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/prefer-es6-class": {
        "name": "react/prefer-es6-class",
        "value": ["error", "always"],
        "description": "必须使用 Class 的形式创建组件",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/prefer-read-only-props": {
        "name": "react/prefer-read-only-props",
        "value": "off",
        "description": "使用 Flow 时，props 必须设置为只读的",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/prefer-stateless-function": {
        "name": "react/prefer-stateless-function",
        "value": "off",
        "description": "必须使用 pure function",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/prop-types": {
        "name": "react/prop-types",
        "value": "off",
        "description": "组件必须写 propTypes",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/react-in-jsx-scope": {
        "name": "react/react-in-jsx-scope",
        "value": "off",
        "description": "出现 jsx 的地方必须导入 React",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "已经在 no-undef 中限制了"
    },
    "react/require-default-props": {
        "name": "react/require-default-props",
        "value": "off",
        "description": "非 required 的 prop 必须有 defaultProps",
        "category": "",
        "badExample": "",
        "goodExample": "",
        "reason": "不强制要求写 propTypes"
    },
    "react/require-optimization": {
        "name": "react/require-optimization",
        "value": "off",
        "description": "组件必须有 shouldComponentUpdate",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/require-render-return": {
        "name": "react/require-render-return",
        "value": "error",
        "description": "render 方法中必须有返回值",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/self-closing-comp": {
        "name": "react/self-closing-comp",
        "value": "off",
        "description": "组件内没有 children 时，必须使用自闭和写法",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/sort-comp": {
        "name": "react/sort-comp",
        "value": "error",
        "description": "组件内方法必须按照一定规则排序",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/sort-prop-types": {
        "name": "react/sort-prop-types",
        "value": "off",
        "description": "propTypes 的熟悉必须按照字母排序",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/state-in-constructor": {
        "name": "react/state-in-constructor",
        "value": "off",
        "description": "必须在构造函数中初始化 state",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/static-property-placement": {
        "name": "react/static-property-placement",
        "value": "error",
        "description": "类的静态属性必须使用 static 关键字定义",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/style-prop-object": {
        "name": "react/style-prop-object",
        "value": "error",
        "description": "style 属性的取值必须是 object",
        "category": "",
        "badExample": "",
        "goodExample": ""
    },
    "react/void-dom-elements-no-children": {
        "name": "react/void-dom-elements-no-children",
        "value": "error",
        "description": "HTML 中的自闭和标签禁止有 children",
        "category": "",
        "badExample": "",
        "goodExample": ""
    }
}
