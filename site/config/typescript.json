[
    {
        "name": "@typescript-eslint/indent",
        "value": ["error", 4, { "SwitchCase": 1, "flatTernaryExpressions": true }],
        "description": "一个缩进必须用四个空格替代",
        "category": "Stylistic Issues",
        "comments": "/**\n         * 一个缩进必须用四个空格替代\n         * @category Stylistic Issues\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/adjacent-overload-signatures",
        "value": "error",
        "description": "重载的函数必须写在一起",
        "category": "TypeScript",
        "comments": "/**\n         * 重载的函数必须写在一起\n         * @category TypeScript\n         * @reason 增加可读性\n         */",
        "reason": "增加可读性"
    },
    {
        "name": "@typescript-eslint/array-type",
        "value": "off",
        "description": "限制数组类型必须使用 Array<T> 或 T[]",
        "category": "TypeScript",
        "comments": "/**\n         * 限制数组类型必须使用 Array<T> 或 T[]\n         * @category TypeScript\n         * @reason 允许灵活运用两者\n         * @fixable\n         */",
        "reason": "允许灵活运用两者",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/await-thenable",
        "value": "off",
        "description": "禁止对没有 then 方法的对象使用 await",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止对没有 then 方法的对象使用 await\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/ban-ts-ignore",
        "value": "off",
        "description": "是否允许使用 // @ts-ignore 来忽略编译错误",
        "category": "TypeScript",
        "comments": "/**\n        * 是否允许使用 // @ts-ignore 来忽略编译错误\n        * @category TypeScript\n        * @reason 既然已经使用注释来忽略编译错误了，说明已经清楚可能带来的后果\n        */",
        "reason": "既然已经使用注释来忽略编译错误了，说明已经清楚可能带来的后果"
    },
    {
        "name": "@typescript-eslint/ban-types",
        "value": "off",
        "description": "禁用特定的类型",
        "category": "TypeScript",
        "comments": "/**\n         * 禁用特定的类型\n         * @category TypeScript\n         * @reason 该规则用于禁止某个具体的类型的使用\n         * @fixable\n         */",
        "reason": "该规则用于禁止某个具体的类型的使用",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/camelcase",
        "value": "off",
        "description": "变量名必须是 camelcase 风格的",
        "category": "TypeScript",
        "comments": "/**\n         * 变量名必须是 camelcase 风格的\n         * @category TypeScript\n         * @reason 很多 api 或文件名都不是 camelcase\n         */",
        "reason": "很多 api 或文件名都不是 camelcase"
    },
    {
        "name": "@typescript-eslint/class-name-casing",
        "value": "error",
        "description": "类名与接口名必须为驼峰式",
        "category": "TypeScript",
        "comments": "/**\n         * 类名与接口名必须为驼峰式\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/explicit-function-return-type",
        "value": "off",
        "description": "函数返回值必须与声明的类型一致",
        "category": "TypeScript",
        "comments": "/**\n         * 函数返回值必须与声明的类型一致\n         * @category TypeScript\n         * @reason 编译阶段检查就足够了\n         */",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/explicit-member-accessibility",
        "value": "error",
        "description": "必须设置类的成员的可访问性",
        "category": "TypeScript",
        "comments": "/**\n         * 必须设置类的成员的可访问性\n         * @category TypeScript\n         * @reason 将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好\n         */",
        "reason": "将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好"
    },
    {
        "name": "@typescript-eslint/func-call-spacing",
        "value": ["error", "never"],
        "description": "函数名和执行它的括号之间禁止有空格",
        "category": "TypeScript",
        "comments": "/**\n         * 函数名和执行它的括号之间禁止有空格\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/generic-type-naming",
        "value": "off",
        "description": "约束泛型的命名规则",
        "category": "TypeScript",
        "comments": "/**\n         * 约束泛型的命名规则\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/interface-name-prefix",
        "value": "off",
        "description": "接口名称必须已 I 开头",
        "category": "TypeScript",
        "comments": "/**\n         * 接口名称必须已 I 开头\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/member-delimiter-style",
        "value": "error",
        "description": "接口和类型别名的成员之间必须使用分号分隔",
        "category": "TypeScript",
        "comments": "/**\n         * 接口和类型别名的成员之间必须使用分号分隔\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/member-naming",
        "value": "off",
        "description": "私有成员必须以 _ 开头",
        "category": "TypeScript",
        "comments": "/**\n         * 私有成员必须以 _ 开头\n         * @category TypeScript\n         * @reason 已有 private 修饰符了，没必要限制变量名\n         */",
        "reason": "已有 private 修饰符了，没必要限制变量名"
    },
    {
        "name": "@typescript-eslint/member-ordering",
        "value": [
            "error",
            {
                "default": [
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "static-field",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "static-method",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "instance-field",
                    "field",
                    "constructor",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "instance-method",
                    "method"
                ]
            }
        ],
        "description": "指定类成员的排序规则",
        "category": "TypeScript",
        "comments": "/**\n         * 指定类成员的排序规则\n         * @category TypeScript\n         * @reason 优先级：\n         * 1. static > instance\n         * 2. field > constructor > method\n         * 3. public > protected > private\n         */",
        "reason": "优先级：\n1. static > instance\n2. field > constructor > method\n3. public > protected > private"
    },
    {
        "name": "@typescript-eslint/no-angle-bracket-type-assertion",
        "value": "error",
        "description": "类型断言必须使用 as Type，禁止使用 <Type>",
        "category": "TypeScript",
        "comments": "/**\n         * 类型断言必须使用 as Type，禁止使用 <Type>\n         * @category TypeScript\n         * @reason <Type> 容易被理解为 jsx\n         */",
        "reason": "<Type> 容易被理解为 jsx"
    },
    {
        "name": "@typescript-eslint/no-array-constructor",
        "value": "off",
        "description": "禁止使用 Array 构造函数",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 Array 构造函数\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-empty-interface",
        "value": "error",
        "description": "禁止定义空的接口",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止定义空的接口\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-explicit-any",
        "value": "off",
        "description": "禁止使用 any",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 any\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-extra-parens",
        "value": ["error", "functions"],
        "description": "禁止函数表达式中出现多余的括号",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止函数表达式中出现多余的括号\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-extraneous-class",
        "value": "off",
        "description": "禁止定义没必要的类，比如只有静态方法的类",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止定义没必要的类，比如只有静态方法的类\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-for-in-array",
        "value": "off",
        "description": "禁止对 array 使用 for in 循环",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止对 array 使用 for in 循环\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-inferrable-types",
        "value": "error",
        "description": "禁止给一个初始化时直接赋值为 number, string 的变量显式的指定类型",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止给一个初始化时直接赋值为 number, string 的变量显式的指定类型\n         * @category TypeScript\n         * @reason 可以简化代码\n         * @fixable\n         */",
        "reason": "可以简化代码",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-magic-numbers",
        "value": "off",
        "description": "禁止使用 magic numbers",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 magic numbers\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-misused-new",
        "value": "off",
        "description": "禁止在接口中定义 constructor，或在类中定义 new",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止在接口中定义 constructor，或在类中定义 new\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-namespace",
        "value": ["error", { "allowDeclarations": true, "allowDefinitionFiles": true }],
        "description": "禁止使用 namespace 来定义命名空间",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 namespace 来定义命名空间\n         * @category TypeScript\n         * @reason 使用 es6 引入模块，才是更标准的方式。\n         * 允许使用 declare namespace ... {} 来定义外部命名空间\n         */",
        "reason": "使用 es6 引入模块，才是更标准的方式。\n允许使用 declare namespace ... {} 来定义外部命名空间"
    },
    {
        "name": "@typescript-eslint/no-non-null-assertion",
        "value": "off",
        "description": "禁止使用 non-null 断言（感叹号）",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 non-null 断言（感叹号）\n         * @category TypeScript\n         * @reason 使用 non-null 断言时就已经清楚了风险\n         */",
        "reason": "使用 non-null 断言时就已经清楚了风险"
    },
    {
        "name": "@typescript-eslint/no-object-literal-type-assertion",
        "value": "error",
        "description": "禁止对对象字面量进行类型断言（断言成 any 是允许的）",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止对对象字面量进行类型断言（断言成 any 是允许的）\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-parameter-properties",
        "value": "error",
        "description": "禁止给类的构造函数的参数添加修饰符",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止给类的构造函数的参数添加修饰符\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-require-imports",
        "value": "off",
        "description": "禁止使用 require",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 require\n         * @category TypeScript\n         * @reason 有时需要动态引入，还是需要用 require\n         */",
        "reason": "有时需要动态引入，还是需要用 require"
    },
    {
        "name": "@typescript-eslint/no-this-alias",
        "value": ["error", { "allowDestructuring": true }],
        "description": "禁止将 this 赋值给其他变量，除非是解构赋值",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止将 this 赋值给其他变量，除非是解构赋值\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-triple-slash-reference",
        "value": "error",
        "description": "禁止使用三斜杠引入类型定义文件",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用三斜杠引入类型定义文件\n         * @category TypeScript\n         * @reason 三斜杠是已废弃的语法\n         */",
        "reason": "三斜杠是已废弃的语法"
    },
    {
        "name": "@typescript-eslint/no-type-alias",
        "value": "off",
        "description": "禁止使用类型别名",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用类型别名\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-unnecessary-qualifier",
        "value": "off",
        "description": "在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀",
        "category": "TypeScript",
        "comments": "/**\n         * 在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀\n         * @category TypeScript\n         * @reason 已经禁止使用命名空间了\n         * @fixable\n         * @requires-type-information\n         */",
        "reason": "已经禁止使用命名空间了",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-unnecessary-type-assertion",
        "value": "off",
        "description": "禁止无用的类型断言",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止无用的类型断言\n         * @category TypeScript\n         * @fixable\n         * @requires-type-information\n         */",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-unused-vars",
        "value": "off",
        "description": "禁止出现未使用的变量",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止出现未使用的变量\n         * @category TypeScript\n         * @reason 编译阶段检查就足够了\n         */",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/no-use-before-define",
        "value": "off",
        "description": "禁止在定义变量之前就使用它",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止在定义变量之前就使用它\n         * @category TypeScript\n         * @reason 编译阶段检查就足够了\n         */",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/no-useless-constructor",
        "value": "error",
        "description": "禁止出现没必要的 constructor",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止出现没必要的 constructor\n         * @category TypeScript\n         */"
    },
    {
        "name": "@typescript-eslint/no-var-requires",
        "value": "error",
        "description": "禁止使用 require 来引入模块",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 require 来引入模块\n         * @category TypeScript\n         * @reason 统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入\n         */",
        "reason": "统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入"
    },
    {
        "name": "@typescript-eslint/prefer-for-of",
        "value": "error",
        "description": "使用 for 循环遍历数组时，如果 index 仅用于获取成员，则必须使用 for of 循环替代 for 循环",
        "category": "TypeScript",
        "comments": "/**\n         * 使用 for 循环遍历数组时，如果 index 仅用于获取成员，则必须使用 for of 循环替代 for 循环\n         * @category TypeScript\n         * @reason for of 循环更加易读\n         */",
        "reason": "for of 循环更加易读"
    },
    {
        "name": "@typescript-eslint/prefer-function-type",
        "value": "error",
        "description": "可以简写为函数类型的接口或字面类似，必须简写",
        "category": "TypeScript",
        "comments": "/**\n         * 可以简写为函数类型的接口或字面类似，必须简写\n         * @category TypeScript\n         * @reason reason\n         * @fixable\n         */",
        "reason": "reason",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-includes",
        "value": "off",
        "description": "使用 includes 而不是 indexOf",
        "category": "TypeScript",
        "comments": "/**\n         * 使用 includes 而不是 indexOf\n         * @category TypeScript\n         * @fixable\n         * @requires-types-information\n         */",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/prefer-interface",
        "value": "error",
        "description": "优先使用接口而不是字面类型",
        "category": "TypeScript",
        "comments": "/**\n         * 优先使用接口而不是字面类型\n         * @category TypeScript\n         * @reason 接口可以 implement extend 和 merge\n         * @fixable\n         */",
        "reason": "接口可以 implement extend 和 merge",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-namespace-keyword",
        "value": "error",
        "description": "禁止使用 module 来定义命名空间",
        "category": "TypeScript",
        "comments": "/**\n         * 禁止使用 module 来定义命名空间\n         * @category TypeScript\n         * @reason module 已成为 js 的关键字\n         * @fixable\n         */",
        "reason": "module 已成为 js 的关键字",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-regexp-exec",
        "value": "off",
        "description": "使用 RegExp#exec 而不是 String#match",
        "category": "TypeScript",
        "comments": "/**\n         * 使用 RegExp#exec 而不是 String#match\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/prefer-string-starts-ends-with",
        "value": "off",
        "description": "使用 String#startsWith 而不是其他方式",
        "category": "TypeScript",
        "comments": "/**\n         * 使用 String#startsWith 而不是其他方式\n         * @category TypeScript\n         * @fixable\n         * @requires-types-information\n         */",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/promise-function-async",
        "value": "off",
        "description": "async 函数的返回值必须是 Promise",
        "category": "TypeScript",
        "comments": "/**\n         * async 函数的返回值必须是 Promise\n         * @category TypeScript\n         * @reason 有时 async 函数在某个分支是同步的，不需要返回 Promise\n         * @requires-types-information\n         */",
        "reason": "有时 async 函数在某个分支是同步的，不需要返回 Promise",
        "requires": true
    },
    {
        "name": "@typescript-eslint/require-array-sort-compare",
        "value": "off",
        "description": "使用 sort 时必须传入比较函数",
        "category": "TypeScript",
        "comments": "/**\n         * 使用 sort 时必须传入比较函数\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/restrict-plus-operands",
        "value": "off",
        "description": "使用加号时，两者必须同为数字或同为字符串",
        "category": "TypeScript",
        "comments": "/**\n         * 使用加号时，两者必须同为数字或同为字符串\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/semi",
        "value": ["error", "always", { "omitLastInOneLineBlock": true }],
        "description": "结尾必须有分号",
        "category": "TypeScript",
        "comments": "/**\n         * 结尾必须有分号\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/type-annotation-spacing",
        "value": "error",
        "description": "类型定义的冒号前面必须没有空格，后面必须有一个空格",
        "category": "TypeScript",
        "comments": "/**\n         * 类型定义的冒号前面必须没有空格，后面必须有一个空格\n         * @category TypeScript\n         * @fixable\n         */",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/unbound-method",
        "value": "off",
        "description": "方法调用时需要绑定到正确的 this 上",
        "category": "TypeScript",
        "comments": "/**\n         * 方法调用时需要绑定到正确的 this 上\n         * @category TypeScript\n         * @requires-types-information\n         */",
        "requires": true
    },
    {
        "name": "@typescript-eslint/unified-signatures",
        "value": "error",
        "description": "函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明",
        "category": "TypeScript",
        "comments": "/**\n         * 函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明\n         * @category TypeScript\n         */"
    }
]
