[
    {
        "name": "@typescript-eslint/indent",
        "value": ["error", 4, { "SwitchCase": 1, "flatTernaryExpressions": true }],
        "description": "一个缩进必须用四个空格替代",
        "category": "Stylistic Issues",
        "badExample": "function foo(bar) {\n  console.log(1);\n  \n    switch (bar) {\n    case 1:\n        break;\n    case 2:\n        break;\n    }\n}\n",
        "goodExample": "function foo(bar) {\n    console.log(1);\n  \n    switch (bar) {\n        case 1:\n            break;\n        case 2:\n            break;\n    }\n}\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/adjacent-overload-signatures",
        "value": "error",
        "description": "重载的函数必须写在一起",
        "category": "TypeScript",
        "badExample": "declare namespace NSFoo1 {\n    export function foo(s: string): void;\n    export function foo(n: number): void;\n    export function bar(): void;\n    export function foo(sn: string | number): void;\n}\n\ntype TypeFoo1 = {\n    foo(s: string): void;\n    foo(n: number): void;\n    bar(): void;\n    foo(sn: string | number): void;\n};\n\ninterface IFoo1 {\n    foo(s: string): void;\n    foo(n: number): void;\n    bar(): void;\n    foo(sn: string | number): void;\n}\n",
        "goodExample": "declare namespace NSFoo2 {\n    export function foo(s: string): void;\n    export function foo(n: number): void;\n    export function foo(sn: string | number): void;\n    export function bar(): void;\n}\n\ntype TypeFoo2 = {\n    foo(s: string): void;\n    foo(n: number): void;\n    foo(sn: string | number): void;\n    bar(): void;\n};\n\ninterface IFoo2 {\n    foo(s: string): void;\n    foo(n: number): void;\n    foo(sn: string | number): void;\n    bar(): void;\n}\n",
        "reason": "增加可读性"
    },
    {
        "name": "@typescript-eslint/array-type",
        "value": "off",
        "description": "限制数组类型必须使用 Array<T> 或 T[]",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "允许灵活运用两者",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/await-thenable",
        "value": "off",
        "description": "禁止对没有 then 方法的对象使用 await",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/ban-ts-ignore",
        "value": "off",
        "description": "是否允许使用 // @ts-ignore 来忽略编译错误",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "既然已经使用注释来忽略编译错误了，说明已经清楚可能带来的后果"
    },
    {
        "name": "@typescript-eslint/ban-types",
        "value": "off",
        "description": "禁用特定的类型",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "该规则用于禁止某个具体的类型的使用",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/camelcase",
        "value": "off",
        "description": "变量名必须是 camelcase 风格的",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "很多 api 或文件名都不是 camelcase"
    },
    {
        "name": "@typescript-eslint/class-name-casing",
        "value": "error",
        "description": "类名与接口名必须为驼峰式",
        "category": "TypeScript",
        "badExample": "class Invalid_Class_Name {}\n\ninterface invalidInterface {}\n",
        "goodExample": "class ValidClassName {}\n\ninterface ValidInterface {}\n"
    },
    {
        "name": "@typescript-eslint/explicit-function-return-type",
        "value": "off",
        "description": "函数返回值必须与声明的类型一致",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/explicit-member-accessibility",
        "value": "error",
        "description": "必须设置类的成员的可访问性",
        "category": "TypeScript",
        "badExample": "class Foo2 {\n    static foo = 'foo';\n    static getFoo() {\n        return Foo2.foo;\n    }\n    constructor() {}\n    bar = 'bar';\n    getBar() {}\n    get baz() {\n        return 'baz';\n    }\n    set baz(value) {\n        console.log(value);\n    }\n}\n",
        "goodExample": "class Foo2 {\n    private static foo = 'foo';\n    public static getFoo() {\n        return Foo2.foo;\n    }\n    public constructor() {}\n    protected bar = 'bar';\n    public getBar() {}\n    public get baz() {\n        return 'baz';\n    }\n    public set baz(value) {\n        console.log(value);\n    }\n}\n",
        "reason": "将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好"
    },
    {
        "name": "@typescript-eslint/func-call-spacing",
        "value": ["error", "never"],
        "description": "函数名和执行它的括号之间禁止有空格",
        "category": "TypeScript",
        "badExample": "function createArray1<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray1<string> (3, 'x'); // ['x', 'x', 'x']\n",
        "goodExample": "function createArray2<T>(length: number, value: T): Array<T> {\n    let result: T[] = [];\n    for (let i = 0; i < length; i++) {\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray2<string>(3, 'x'); // ['x', 'x', 'x']\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/generic-type-naming",
        "value": "off",
        "description": "约束泛型的命名规则",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/interface-name-prefix",
        "value": "off",
        "description": "接口名称必须已 I 开头",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/member-delimiter-style",
        "value": "error",
        "description": "接口和类型别名的成员之间必须使用分号分隔",
        "category": "TypeScript",
        "badExample": "interface Foo2 {\n    name: string\n    greet(): string\n}\ninterface Bar1 {\n    name: string,\n    greet(): string,\n}\ninterface Baz1 {\n    name: string;\n    greet(): string\n}\ntype TypeFoo1 = { name: string, greet(): string }\ntype TypeBar1 = { name: string; greet(): string; }\n",
        "goodExample": "interface Foo2 {\n    name: string;\n    greet(): string;\n}\ninterface Bar2 {\n    name: string;\n    greet(): string;\n}\ninterface Baz2 {\n    name: string;\n    greet(): string;\n}\ntype TypeFoo2 = { name: string; greet(): string }\ntype TypeBar2 = { name: string; greet(): string }\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/member-naming",
        "value": "off",
        "description": "私有成员必须以 _ 开头",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "已有 private 修饰符了，没必要限制变量名"
    },
    {
        "name": "@typescript-eslint/member-ordering",
        "value": [
            "error",
            {
                "default": [
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "static-field",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "static-method",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "instance-field",
                    "field",
                    "constructor",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "instance-method",
                    "method"
                ]
            }
        ],
        "description": "指定类成员的排序规则",
        "category": "TypeScript",
        "badExample": "class Foo1 {\n    private getBar3() {\n        return this.bar3;\n    }\n    protected getBar2() {}\n    public getBar1() {}\n    public constructor() {\n        console.log(Foo1.getFoo3());\n        console.log(this.getBar3());\n    }\n    private bar3 = 'bar3';\n    protected bar2 = 'bar2';\n    public bar1 = 'bar1';\n    private static getFoo3() {\n        return Foo1.foo3;\n    }\n    protected static getFoo2() {}\n    public static getFoo1() {}\n    private static foo3 = 'foo3';\n    protected static foo2 = 'foo2';\n    public static foo1 = 'foo1';\n}\n",
        "goodExample": "class Foo2 {\n    public static foo1 = 'foo1';\n    protected static foo2 = 'foo2';\n    private static foo3 = 'foo3';\n    public static getFoo1() {}\n    protected static getFoo2() {}\n    private static getFoo3() {\n        return Foo2.foo3;\n    }\n    public bar1 = 'bar1';\n    protected bar2 = 'bar2';\n    private bar3 = 'bar3';\n    public constructor() {\n        console.log(Foo2.getFoo3());\n        console.log(this.getBar3());\n    }\n    public getBar1() {}\n    protected getBar2() {}\n    private getBar3() {\n        return this.bar3;\n    }\n}\n",
        "reason": "优先级：\n1. static > instance\n2. field > constructor > method\n3. public > protected > private"
    },
    {
        "name": "@typescript-eslint/no-angle-bracket-type-assertion",
        "value": "error",
        "description": "类型断言必须使用 as Type，禁止使用 <Type>",
        "category": "TypeScript",
        "badExample": "let bar1: string | number;\nconst foo1 = <string>bar1;\n",
        "goodExample": "let bar2: string | number;\nconst foo2 = bar2 as string;\n",
        "reason": "<Type> 容易被理解为 jsx"
    },
    {
        "name": "@typescript-eslint/no-array-constructor",
        "value": "off",
        "description": "禁止使用 Array 构造函数",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-empty-interface",
        "value": "error",
        "description": "禁止定义空的接口",
        "category": "TypeScript",
        "badExample": "interface Foo1 {}\n",
        "goodExample": "interface Foo2 {\n    foo: string;\n}\n"
    },
    {
        "name": "@typescript-eslint/no-explicit-any",
        "value": "off",
        "description": "禁止使用 any",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/no-extra-parens",
        "value": ["error", "functions"],
        "description": "禁止函数表达式中出现多余的括号",
        "category": "TypeScript",
        "badExample": "let foo1 = (function () { return 1 });\n",
        "goodExample": "let foo2 = function () { return 1 };\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-extraneous-class",
        "value": "off",
        "description": "禁止定义没必要的类，比如只有静态方法的类",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/no-for-in-array",
        "value": "off",
        "description": "禁止对 array 使用 for in 循环",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-inferrable-types",
        "value": "error",
        "description": "禁止给一个初始化时直接赋值为 number, string 的变量显式的指定类型",
        "category": "TypeScript",
        "badExample": "let foo1: number = 1;\nlet bar1: string = '';\n",
        "goodExample": "let foo2 = 1;\nlet bar2 = '';\n",
        "reason": "可以简化代码",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/no-magic-numbers",
        "value": "off",
        "description": "禁止使用 magic numbers",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/no-misused-new",
        "value": "off",
        "description": "禁止在接口中定义 constructor，或在类中定义 new",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/no-namespace",
        "value": ["error", { "allowDeclarations": true, "allowDefinitionFiles": true }],
        "description": "禁止使用 namespace 来定义命名空间",
        "category": "TypeScript",
        "badExample": "namespace foo1 {}\n",
        "goodExample": "declare namespace foo1 {}\n",
        "reason": "使用 es6 引入模块，才是更标准的方式。\n允许使用 declare namespace ... {} 来定义外部命名空间"
    },
    {
        "name": "@typescript-eslint/no-non-null-assertion",
        "value": "off",
        "description": "禁止使用 non-null 断言（感叹号）",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "使用 non-null 断言时就已经清楚了风险"
    },
    {
        "name": "@typescript-eslint/no-object-literal-type-assertion",
        "value": "error",
        "description": "禁止对对象字面量进行类型断言（断言成 any 是允许的）",
        "category": "TypeScript",
        "badExample": "const foo1 = { \n    bar: 1\n} as object;\n",
        "goodExample": "const foo2 = { \n    bar: 1\n} as any;\n"
    },
    {
        "name": "@typescript-eslint/no-parameter-properties",
        "value": "error",
        "description": "禁止给类的构造函数的参数添加修饰符",
        "category": "TypeScript",
        "badExample": "class Foo1 {\n    constructor(private name: string) {}\n}\n",
        "goodExample": "class Foo2 {\n    constructor(name: string) {}\n}\n"
    },
    {
        "name": "@typescript-eslint/no-require-imports",
        "value": "off",
        "description": "禁止使用 require",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "有时需要动态引入，还是需要用 require"
    },
    {
        "name": "@typescript-eslint/no-this-alias",
        "value": ["error", { "allowDestructuring": true }],
        "description": "禁止将 this 赋值给其他变量，除非是解构赋值",
        "category": "TypeScript",
        "badExample": "function foo() {\n    const self = this;\n    setTimeout(function() {\n        self.doWork();\n    });\n}\n",
        "goodExample": "function foo() {\n    const { bar } = this;\n    setTimeout(() => {\n        this.doWork();\n    });\n}\n"
    },
    {
        "name": "@typescript-eslint/no-triple-slash-reference",
        "value": "error",
        "description": "禁止使用三斜杠引入类型定义文件",
        "category": "TypeScript",
        "badExample": "/// <reference path=\"./Animal\">\n",
        "goodExample": "import Animal from './Animal';\n",
        "reason": "三斜杠是已废弃的语法"
    },
    {
        "name": "@typescript-eslint/no-type-alias",
        "value": "off",
        "description": "禁止使用类型别名",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": ""
    },
    {
        "name": "@typescript-eslint/no-unnecessary-qualifier",
        "value": "off",
        "description": "在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "已经禁止使用命名空间了",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-unnecessary-type-assertion",
        "value": "off",
        "description": "禁止无用的类型断言",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/no-unused-vars",
        "value": "off",
        "description": "禁止出现未使用的变量",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/no-use-before-define",
        "value": "off",
        "description": "禁止在定义变量之前就使用它",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "编译阶段检查就足够了"
    },
    {
        "name": "@typescript-eslint/no-useless-constructor",
        "value": "error",
        "description": "禁止出现没必要的 constructor",
        "category": "TypeScript",
        "badExample": "class Foo1 {\n    constructor() {}\n}\n\nclass Bar1 extends Foo1 {\n    constructor() {\n        super();\n    }\n}\n",
        "goodExample": "class Foo2 {\n    constructor() {\n        this.doSomething();\n    }\n    doSomething() {}\n}\n\nclass Bar2 extends Foo1 {\n    constructor() {\n        super();\n        this.doSomething();\n    }\n    doSomething() {}\n}\n"
    },
    {
        "name": "@typescript-eslint/no-var-requires",
        "value": "error",
        "description": "禁止使用 require 来引入模块",
        "category": "TypeScript",
        "badExample": "const Animal = require('./Animal');\n",
        "goodExample": "import Animal from './Animal';\n",
        "reason": "统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入"
    },
    {
        "name": "@typescript-eslint/prefer-for-of",
        "value": "error",
        "description": "使用 for 循环遍历数组时，如果 index 仅用于获取成员，则必须使用 for of 循环替代 for 循环",
        "category": "TypeScript",
        "badExample": "let arr1 = [1, 2, 3];\n\nfor (let i = 0; i < arr1.length; i++) {\n    console.log(arr1[i]);\n}\n",
        "goodExample": "let arr2 = [1, 2, 3];\n\nfor (const x of arr2) {\n    console.log(x);\n}\n\nfor (let i = 0; i < arr2.length; i++) {\n    // i is used to write to arr, so for-of could not be used.\n    arr2[i] = 0;\n}\n\nfor (let i = 0; i < arr2.length; i++) {\n    // i is used independent of arr, so for-of could not be used.\n    console.log(i, arr2[i]);\n}\n",
        "reason": "for of 循环更加易读"
    },
    {
        "name": "@typescript-eslint/prefer-function-type",
        "value": "error",
        "description": "可以简写为函数类型的接口或字面类似，必须简写",
        "category": "TypeScript",
        "badExample": "interface Foo1 {\n    (): string;\n}\n",
        "goodExample": "type Foo2 = () => string;\n",
        "reason": "reason",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-includes",
        "value": "off",
        "description": "使用 includes 而不是 indexOf",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/prefer-interface",
        "value": "error",
        "description": "优先使用接口而不是字面类型",
        "category": "TypeScript",
        "badExample": "type Foo1 = {\n    foo: string;\n}\n",
        "goodExample": "interface Foo2 {\n    foo: string;\n}\n",
        "reason": "接口可以 implement extend 和 merge",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-namespace-keyword",
        "value": "error",
        "description": "禁止使用 module 来定义命名空间",
        "category": "TypeScript",
        "badExample": "module Foo1 {}\n",
        "goodExample": "namespace Foo2 {}\n",
        "reason": "module 已成为 js 的关键字",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/prefer-regexp-exec",
        "value": "off",
        "description": "使用 RegExp#exec 而不是 String#match",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/prefer-string-starts-ends-with",
        "value": "off",
        "description": "使用 String#startsWith 而不是其他方式",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "fixable": true,
        "requires": true
    },
    {
        "name": "@typescript-eslint/promise-function-async",
        "value": "off",
        "description": "async 函数的返回值必须是 Promise",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "reason": "有时 async 函数在某个分支是同步的，不需要返回 Promise",
        "requires": true
    },
    {
        "name": "@typescript-eslint/require-array-sort-compare",
        "value": "off",
        "description": "使用 sort 时必须传入比较函数",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/restrict-plus-operands",
        "value": "off",
        "description": "使用加号时，两者必须同为数字或同为字符串",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/semi",
        "value": ["error", "always", { "omitLastInOneLineBlock": true }],
        "description": "结尾必须有分号",
        "category": "TypeScript",
        "badExample": "let foo = 1\n\nexport { foo }\n",
        "goodExample": "let foo = 1;\n\nexport { foo };\n\nexport default interface Foo {\n    bar: string;\n}\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/type-annotation-spacing",
        "value": "error",
        "description": "类型定义的冒号前面必须没有空格，后面必须有一个空格",
        "category": "TypeScript",
        "badExample": "let foo1:string;\nlet bar1 :string;\nlet baz1 : string;\n",
        "goodExample": "let foo2: string;\n",
        "fixable": true
    },
    {
        "name": "@typescript-eslint/unbound-method",
        "value": "off",
        "description": "方法调用时需要绑定到正确的 this 上",
        "category": "TypeScript",
        "badExample": "",
        "goodExample": "",
        "requires": true
    },
    {
        "name": "@typescript-eslint/unified-signatures",
        "value": "error",
        "description": "函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明",
        "category": "TypeScript",
        "badExample": "function foo1(x: number): void;\nfunction foo1(x: string): void;\nfunction foo1(x: any): any {\n    return x;\n}\n",
        "goodExample": "function foo2(x: number | string): void;\nfunction foo2(x: any): any {\n    return x;\n}\n"
    }
]
